// Code generated by MockGen. DO NOT EDIT.
// Source: ./supervisor/commander/commander.go
//
// Generated by this command:
//
//	mockgen -package mock -source=./supervisor/commander/commander.go -destination ./supervisor/commander/mock/commander.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICommander is a mock of ICommander interface.
type MockICommander struct {
	ctrl     *gomock.Controller
	recorder *MockICommanderMockRecorder
}

// MockICommanderMockRecorder is the mock recorder for MockICommander.
type MockICommanderMockRecorder struct {
	mock *MockICommander
}

// NewMockICommander creates a new mock instance.
func NewMockICommander(ctrl *gomock.Controller) *MockICommander {
	mock := &MockICommander{ctrl: ctrl}
	mock.recorder = &MockICommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommander) EXPECT() *MockICommanderMockRecorder {
	return m.recorder
}

// ExitCode mocks base method.
func (m *MockICommander) ExitCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// ExitCode indicates an expected call of ExitCode.
func (mr *MockICommanderMockRecorder) ExitCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitCode", reflect.TypeOf((*MockICommander)(nil).ExitCode))
}

// Exited mocks base method.
func (m *MockICommander) Exited() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exited")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Exited indicates an expected call of Exited.
func (mr *MockICommanderMockRecorder) Exited() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exited", reflect.TypeOf((*MockICommander)(nil).Exited))
}

// IsRunning mocks base method.
func (m *MockICommander) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockICommanderMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockICommander)(nil).IsRunning))
}

// Pid mocks base method.
func (m *MockICommander) Pid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Pid indicates an expected call of Pid.
func (mr *MockICommanderMockRecorder) Pid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pid", reflect.TypeOf((*MockICommander)(nil).Pid))
}

// Restart mocks base method.
func (m *MockICommander) Restart(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart.
func (mr *MockICommanderMockRecorder) Restart(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockICommander)(nil).Restart), ctx)
}

// Start mocks base method.
func (m *MockICommander) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockICommanderMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockICommander)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockICommander) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockICommanderMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockICommander)(nil).Stop), ctx)
}
