// Code generated by MockGen. DO NOT EDIT.
// Source: ./supervisor/supervisor.go
//
// Generated by this command:
//
//	mockgen -package mock -source=./supervisor/supervisor.go -destination ./supervisor/mock/supervisor.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	net "net"
	reflect "reflect"

	types "github.com/open-telemetry/opamp-go/client/types"
	protobufs "github.com/open-telemetry/opamp-go/protobufs"
	server "github.com/open-telemetry/opamp-go/server"
	gomock "go.uber.org/mock/gomock"
)

// MockOpAmpClient is a mock of OpAmpClient interface.
type MockOpAmpClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpAmpClientMockRecorder
}

// MockOpAmpClientMockRecorder is the mock recorder for MockOpAmpClient.
type MockOpAmpClientMockRecorder struct {
	mock *MockOpAmpClient
}

// NewMockOpAmpClient creates a new mock instance.
func NewMockOpAmpClient(ctrl *gomock.Controller) *MockOpAmpClient {
	mock := &MockOpAmpClient{ctrl: ctrl}
	mock.recorder = &MockOpAmpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpAmpClient) EXPECT() *MockOpAmpClientMockRecorder {
	return m.recorder
}

// AgentDescription mocks base method.
func (m *MockOpAmpClient) AgentDescription() *protobufs.AgentDescription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentDescription")
	ret0, _ := ret[0].(*protobufs.AgentDescription)
	return ret0
}

// AgentDescription indicates an expected call of AgentDescription.
func (mr *MockOpAmpClientMockRecorder) AgentDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentDescription", reflect.TypeOf((*MockOpAmpClient)(nil).AgentDescription))
}

// RequestConnectionSettings mocks base method.
func (m *MockOpAmpClient) RequestConnectionSettings(request *protobufs.ConnectionSettingsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestConnectionSettings", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestConnectionSettings indicates an expected call of RequestConnectionSettings.
func (mr *MockOpAmpClientMockRecorder) RequestConnectionSettings(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestConnectionSettings", reflect.TypeOf((*MockOpAmpClient)(nil).RequestConnectionSettings), request)
}

// SendCustomMessage mocks base method.
func (m *MockOpAmpClient) SendCustomMessage(message *protobufs.CustomMessage) (chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCustomMessage", message)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCustomMessage indicates an expected call of SendCustomMessage.
func (mr *MockOpAmpClientMockRecorder) SendCustomMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCustomMessage", reflect.TypeOf((*MockOpAmpClient)(nil).SendCustomMessage), message)
}

// SetAgentDescription mocks base method.
func (m *MockOpAmpClient) SetAgentDescription(descr *protobufs.AgentDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAgentDescription", descr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAgentDescription indicates an expected call of SetAgentDescription.
func (mr *MockOpAmpClientMockRecorder) SetAgentDescription(descr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAgentDescription", reflect.TypeOf((*MockOpAmpClient)(nil).SetAgentDescription), descr)
}

// SetCustomCapabilities mocks base method.
func (m *MockOpAmpClient) SetCustomCapabilities(customCapabilities *protobufs.CustomCapabilities) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCustomCapabilities", customCapabilities)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCustomCapabilities indicates an expected call of SetCustomCapabilities.
func (mr *MockOpAmpClientMockRecorder) SetCustomCapabilities(customCapabilities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomCapabilities", reflect.TypeOf((*MockOpAmpClient)(nil).SetCustomCapabilities), customCapabilities)
}

// SetHealth mocks base method.
func (m *MockOpAmpClient) SetHealth(health *protobufs.ComponentHealth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHealth", health)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHealth indicates an expected call of SetHealth.
func (mr *MockOpAmpClientMockRecorder) SetHealth(health any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHealth", reflect.TypeOf((*MockOpAmpClient)(nil).SetHealth), health)
}

// SetPackageStatuses mocks base method.
func (m *MockOpAmpClient) SetPackageStatuses(statuses *protobufs.PackageStatuses) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPackageStatuses", statuses)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPackageStatuses indicates an expected call of SetPackageStatuses.
func (mr *MockOpAmpClientMockRecorder) SetPackageStatuses(statuses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPackageStatuses", reflect.TypeOf((*MockOpAmpClient)(nil).SetPackageStatuses), statuses)
}

// SetRemoteConfigStatus mocks base method.
func (m *MockOpAmpClient) SetRemoteConfigStatus(status *protobufs.RemoteConfigStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteConfigStatus", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteConfigStatus indicates an expected call of SetRemoteConfigStatus.
func (mr *MockOpAmpClientMockRecorder) SetRemoteConfigStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteConfigStatus", reflect.TypeOf((*MockOpAmpClient)(nil).SetRemoteConfigStatus), status)
}

// Start mocks base method.
func (m *MockOpAmpClient) Start(ctx context.Context, settings types.StartSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockOpAmpClientMockRecorder) Start(ctx, settings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOpAmpClient)(nil).Start), ctx, settings)
}

// Stop mocks base method.
func (m *MockOpAmpClient) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockOpAmpClientMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOpAmpClient)(nil).Stop), ctx)
}

// UpdateEffectiveConfig mocks base method.
func (m *MockOpAmpClient) UpdateEffectiveConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEffectiveConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEffectiveConfig indicates an expected call of UpdateEffectiveConfig.
func (mr *MockOpAmpClientMockRecorder) UpdateEffectiveConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEffectiveConfig", reflect.TypeOf((*MockOpAmpClient)(nil).UpdateEffectiveConfig), ctx)
}

// MockOpAmpServer is a mock of OpAmpServer interface.
type MockOpAmpServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpAmpServerMockRecorder
}

// MockOpAmpServerMockRecorder is the mock recorder for MockOpAmpServer.
type MockOpAmpServerMockRecorder struct {
	mock *MockOpAmpServer
}

// NewMockOpAmpServer creates a new mock instance.
func NewMockOpAmpServer(ctrl *gomock.Controller) *MockOpAmpServer {
	mock := &MockOpAmpServer{ctrl: ctrl}
	mock.recorder = &MockOpAmpServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpAmpServer) EXPECT() *MockOpAmpServerMockRecorder {
	return m.recorder
}

// Addr mocks base method.
func (m *MockOpAmpServer) Addr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockOpAmpServerMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockOpAmpServer)(nil).Addr))
}

// Attach mocks base method.
func (m *MockOpAmpServer) Attach(settings server.Settings) (server.HTTPHandlerFunc, server.ConnContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", settings)
	ret0, _ := ret[0].(server.HTTPHandlerFunc)
	ret1, _ := ret[1].(server.ConnContext)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Attach indicates an expected call of Attach.
func (mr *MockOpAmpServerMockRecorder) Attach(settings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockOpAmpServer)(nil).Attach), settings)
}

// Start mocks base method.
func (m *MockOpAmpServer) Start(settings server.StartSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockOpAmpServerMockRecorder) Start(settings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOpAmpServer)(nil).Start), settings)
}

// Stop mocks base method.
func (m *MockOpAmpServer) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockOpAmpServerMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOpAmpServer)(nil).Stop), ctx)
}
